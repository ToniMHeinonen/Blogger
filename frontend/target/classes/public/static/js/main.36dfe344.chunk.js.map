{"version":3,"sources":["logo.svg","Post.js","AllPosts.js","AddPost.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Post","props","topic","creationDate","text","onClick","event","fetch","id","method","then","window","location","reload","AllPosts","data","i","amount","push","key","allBlogPosts","AddPost","React","useState","redirect","setRedirect","sending","isSending","send","a","preventDefault","FormData","target","newPost","get","conf","headers","body","JSON","stringify","to","onSubmit","name","type","disabled","Home","blogPosts","setBlogPosts","isLoading","setIsLoading","hr","json","useEffect","fetchBlogPosts","length","App","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sKAAAA,EAAOC,QAAU,IAA0B,kC,8FCqB5BC,MAnBf,SAAcC,GAQZ,OACE,6BACA,4BAAKA,EAAMC,OACX,4BAAKD,EAAME,cACX,2BAAIF,EAAMG,MACV,wCACA,4BAAQC,QAbM,SAACC,GACfC,MAAM,cAAgBN,EAAMO,GAAI,CAC9BC,OAAQ,WAETC,KAAKC,OAAOC,SAASC,YAStB,YCEWC,MAff,SAAkBb,GAEd,IADA,IAAIc,EAAO,GACFC,EAAI,EAAGA,EAAIf,EAAMgB,OAAQD,IAC9BD,EAAKG,KAAK,kBAAC,EAAD,CACNC,IAAKlB,EAAMmB,aAAaJ,GAAGR,GAC3BA,GAAIP,EAAMmB,aAAaJ,GAAGR,GAC1BN,MAAOD,EAAMmB,aAAaJ,GAAGd,MAC7BC,aAAcF,EAAMmB,aAAaJ,GAAGb,aACpCC,KAAMH,EAAMmB,aAAaJ,GAAGZ,QAIpC,OAAO,6BAAMW,I,sCCkCFM,MA9Cf,WAAoB,IAAD,EACeC,IAAMC,UAAS,GAD9B,mBACVC,EADU,KACAC,EADA,OAEYH,IAAMC,UAAS,GAF3B,mBAEVG,EAFU,KAEDC,EAFC,KAIXC,EAAI,uCAAG,WAAOtB,GAAP,mBAAAuB,EAAA,6DACXF,GAAU,GACVrB,EAAMwB,iBACAf,EAAO,IAAIgB,SAASzB,EAAM0B,QAC1BC,EAAU,CAAE/B,MAAOa,EAAKmB,IAAI,SAAU9B,KAAMW,EAAKmB,IAAI,UACrDC,EAAO,CACX1B,OAAQ,OACR2B,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUN,IARZ,SAUL1B,MAAM,cAAe4B,GAVhB,OAWXV,GAAY,GAXD,2CAAH,sDAcV,OAAID,EACK,kBAAC,IAAD,CAAUN,MAAI,EAACsB,GAAG,MAIzB,0BAAMC,SAAUb,GACd,wCAEE,6BACA,2BACApB,GAAG,QACHkC,KAAK,QACLC,KAAK,UAGP,6BAAK,6BAVP,cAYE,6BACA,8BACEnC,GAAG,QACHkC,KAAK,QACLC,KAAK,SACL,6BAAK,6BACP,4BAAQC,SAAUlB,GAAlB,UCfSmB,MAvBf,WAAiB,IAAD,EACoBvB,IAAMC,SAAS,IADnC,mBACPuB,EADO,KACIC,EADJ,OAEoBzB,IAAMC,UAAS,GAFnC,mBAEPyB,EAFO,KAEIC,EAFJ,iDAId,8BAAApB,EAAA,6DACEoB,GAAa,GADf,SAEmB1C,MAAM,eAFzB,cAEQ2C,EAFR,gBAGqBA,EAAGC,OAHxB,OAGQA,EAHR,OAIEJ,EAAaI,GACbF,GAAa,GALf,4CAJc,sBAgBd,OAJA3B,IAAM8B,WAAU,YAZF,mCAaZC,KACC,IAGD,6BACCL,EAAY,aAAe,kBAAC,EAAD,CAAU5B,aAAc0B,EAAW7B,OAAQ6B,EAAUQ,W,QCkBtEC,MA5Bf,WAEE,OACE,kBAAC,IAAD,KACE,6BACE,6BACI,4BACE,4BACE,kBAAC,IAAD,CAAMf,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,mBAIR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgB,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCtBQC,QACW,cAA7B9C,OAAOC,SAAS8C,UAEe,UAA7B/C,OAAOC,SAAS8C,UAEhB/C,OAAOC,SAAS8C,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.36dfe344.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nfunction Post(props) {\r\n  const deleted = (event) => {\r\n    fetch('/blogposts/' + props.id, {\r\n      method: 'DELETE',\r\n    })\r\n    .then(window.location.reload())\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    <h2>{props.topic}</h2>\r\n    <h3>{props.creationDate}</h3>\r\n    <p>{props.text}</p>\r\n    <button>Edit</button>\r\n    <button onClick={deleted}>Delete</button>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from 'react';\r\nimport Post from './Post'\r\n\r\nfunction AllPosts(props) {\r\n    let data = []\r\n    for (let i = 0; i < props.amount; i++) {\r\n        data.push(<Post \r\n            key={props.allBlogPosts[i].id}\r\n            id={props.allBlogPosts[i].id}\r\n            topic={props.allBlogPosts[i].topic} \r\n            creationDate={props.allBlogPosts[i].creationDate} \r\n            text={props.allBlogPosts[i].text}>\r\n            </Post>)\r\n    }\r\n\r\n    return <div>{data}</div>\r\n}\r\n\r\nexport default AllPosts","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nfunction AddPost() {\r\n  const [redirect, setRedirect] = React.useState(false)\r\n  const [sending, isSending] = React.useState(false)\r\n\r\n  const send = async (event) => {\r\n    isSending(true)\r\n    event.preventDefault()\r\n    const data = new FormData(event.target)\r\n    const newPost = { topic: data.get('topic'), text: data.get('blogi') }\r\n    const conf = {\r\n      method: 'POST',\r\n      headers: { 'Content-type': 'application/json' },\r\n      body: JSON.stringify(newPost)\r\n    }\r\n    await fetch('/blogposts/', conf)\r\n    setRedirect(true)\r\n  }\r\n\r\n  if (redirect) {\r\n    return <Redirect push to=\"/\"/>\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={send}>\r\n      <label>\r\n        Topic:\r\n        <br/>\r\n        <input\r\n        id=\"topic\"\r\n        name=\"topic\"\r\n        type=\"text\"\r\n        />\r\n      </label>\r\n      <br/><br/>\r\n      Your story:\r\n      <br/>\r\n      <textarea\r\n        id=\"blogi\"\r\n        name=\"blogi\"\r\n        type=\"text\"/>\r\n        <br/><br/>\r\n      <button disabled={sending}>Send</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default AddPost\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Post from './Post';\r\nimport AllPosts from './AllPosts';\r\nimport AddPost from './AddPost';\r\n\r\nfunction Home() {\r\n  const [blogPosts, setBlogPosts] = React.useState([])\r\n  const [isLoading, setIsLoading] = React.useState(false)\r\n\r\n  async function fetchBlogPosts() {\r\n    setIsLoading(true)\r\n    const hr = await fetch('/blogposts/')\r\n    const json = await hr.json()\r\n    setBlogPosts(json)\r\n    setIsLoading(false)\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    fetchBlogPosts()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n    {isLoading ? 'Loading...' : <AllPosts allBlogPosts={blogPosts} amount={blogPosts.length}/>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport logo from './logo.svg'\r\nimport './App.css'\r\nimport Post from './Post'\r\nimport AllPosts from './AllPosts'\r\nimport AddPost from './AddPost'\r\nimport Home from './Home'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\"\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <nav>\r\n            <ul>\r\n              <li>\r\n                <Link to=\"/\">Home</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/addPost\">Add new post</Link>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n        <Switch>\r\n          <Route path=\"/addPost\">\r\n            <AddPost />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}